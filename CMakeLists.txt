cmake_minimum_required (VERSION 3.3.2)

enable_language(Swift)

project(your_project)

include(BundleUtilities)

set(CODESIGNIDENTITY "iPhone Developer")
set(DEPLOYMENT_TARGET 8.0)

macro(set_xcode_property TARGET XCODE_PROPERTY XCODE_VALUE)
  set_property(TARGET ${TARGET} PROPERTY XCODE_ATTRIBUTE_${XCODE_PROPERTY} ${XCODE_VALUE})
endmacro(set_xcode_property)

MACRO(COPY_TO_BUNDLE resourcePath bundlePath)
    LIST(APPEND BUNDLE_COPY_RESOURCES ${resourcePath})
    SET_SOURCE_FILES_PROPERTIES(${resourcePath} PROPERTIES MACOSX_PACKAGE_LOCATION ${bundlePath})
ENDMACRO(COPY_TO_BUNDLE)

set(APP_NAME "YOURAPP")
set(BUNDLE_IDENTIFIER "com.company.yourcompany")
set(PRODUCT_NAME ${APP_NAME})
set(EXECUTABLE_NAME ${APP_NAME})
set(MACOSX_BUNDLE_EXECUTABLE_NAME ${APP_NAME})
set(MACOSX_BUNDLE_INFO_STRING ${BUNDLE_IDENTIFIER})
set(MACOSX_BUNDLE_GUI_IDENTIFIER ${BUNDLE_IDENTIFIER})
set(MACOSX_BUNDLE_BUNDLE_NAME ${BUNDLE_IDENTIFIER})
set(MACOSX_BUNDLE_ICON_FILE "")
set(MACOSX_BUNDLE_LONG_VERSION_STRING "1.0")
set(MACOSX_BUNDLE_SHORT_VERSION_STRING "1.0")
set(MACOSX_BUNDLE_BUNDLE_VERSION "1.0")
set(MACOSX_BUNDLE_COPYRIGHT "Copyright YOU")
set(MACOSX_DEPLOYMENT_TARGET "8.0")

set(APP_SOURCE_FILES
  ./AppDelegate.swift
  ./ViewController.swift
)

set(RESOURCES
  ./Main.storyboard
  ./LaunchScreen.storyboard
)


MESSAGE(STATUS ${PROJECT_SOURCE_DIR})
MESSAGE(STATUS ${APP_SOURCE_FILES})

add_executable(
    ${APP_NAME}
    MACOSX_BUNDLE
    ${APP_SOURCE_FILES}
    ${RESOURCES}
)

# To enable bitcode:
# set_target_properties(${APP_NAME} PROPERTIES XCODE_ATTRIBUTE_ENABLE_BITCODE "NO")

# To link a .framework framework from the filesystem
# target_link_libraries(${APP_NAME} 
  # ${PROJECT_SOURCE_DIR}/Torch.framework
# )

# Include headers to they're available as #import <Header/Header.h> from a framework
# target_include_directories(${APP_NAME}
  # PUBLIC ${PROJECT_SOURCE_DIR}/Torch.framework/Headers
# )

# Link a static library
# target_link_libraries(${APP_NAME} 
#   ${PROJECT_SOURCE_DIR}/framework/lib/libtorch.a
# )

# Include a source directory outside a framework
# target_include_directories(${APP_NAME}
#   PUBLIC ${PROJECT_SOURCE_DIR}/framework/include
# )

# Locate system libraries on iOS
find_library(UIKIT UIKit)
find_library(FOUNDATION Foundation)
find_library(COREGRAPHICS CoreGraphics)
find_library(MOBILECORESERVICES MobileCoreServices)
find_library(CFNETWORK CFNetwork)
find_library(SYSTEMCONFIGURATION SystemConfiguration)
find_library(SECURITY Security)
find_library(AVFOUNDATION AVFoundation)
find_library(AUDIOTOOLBOX AudioToolbox)
find_library(ACCELERATE Accelerate)

# link the libraries loaded above
target_link_libraries(${APP_NAME} ${UIKIT})
target_link_libraries(${APP_NAME} ${FOUNDATION})
target_link_libraries(${APP_NAME} ${COREGRAPHICS})
target_link_libraries(${APP_NAME} ${MOBILECORESERVICES})
target_link_libraries(${APP_NAME} ${CFNETWORK})
target_link_libraries(${APP_NAME} ${SYSTEMCONFIGURATION})
target_link_libraries(${APP_NAME} ${SECURITY})
target_link_libraries(${APP_NAME} ${AVFOUNDATION})
target_link_libraries(${APP_NAME} ${AUDIOTOOLBOX})
target_link_libraries(${APP_NAME} libicucore.dylib)
target_link_libraries(${APP_NAME} ${ACCELERATE})

# Link in the cpp standard library
target_link_libraries(${APP_NAME} c++)


# Set the C++ library to the the standard library
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fobjc-arc -stdlib=libstdc++ -isysroot ${CMAKE_OSX_SYSROOT}")
# Turn on ARC
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fobjc-arc -stdlib=libstdc++ -isysroot ${CMAKE_OSX_SYSROOT}")

# Create the app target
set_target_properties(${APP_NAME} PROPERTIES
                      XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym"
                      XCODE_ATTRIBUTE_GCC_PREFIX_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/Prefix.pch"
                      RESOURCE "${RESOURCES}"
                      XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER "YES"
                      XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET ${DEPLOYMENT_TARGET}
                      XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY ${CODESIGNIDENTITY}
                      MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist
                      XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY "1"
                      XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC YES
                      XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES "NO"
                      XCODE_ATTRIBUTE_LD_RUNPATH_SEARCH_PATHS "@executable_path/Frameworks"
                      XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER ${BUNDLE_IDENTIFIER})

